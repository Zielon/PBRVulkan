#version 460

precision highp float;
precision highp int;

#extension GL_GOOGLE_include_directive : require
#extension GL_NV_ray_tracing : require

// Replaced by Compiler.h
// ====== DEFINES ======

#include "../Common/Structs.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureNV TLAS;
layout(binding = 1, rgba32f) uniform image2D AccumulationImage;
layout(binding = 2, rgba8) uniform image2D OutputImage;
layout(binding = 10, rgba32f) uniform image2D NormalsImage;
layout(binding = 3) readonly uniform UniformBufferObject { Uniform ubo; };

layout(location = 0) rayPayloadNV RayPayload payload;

#include "../Common/Random.glsl"
#include "../Common/Math.glsl"
#include "../Common/Denoiser.glsl"

void main() 
{
	mat4 projInv = inverse(ubo.proj);
	mat4 viewInv = inverse(ubo.view);

	uint  rayFlags = gl_RayFlagsOpaqueNV;
	float tMin     = MINIMUM;
	float tMax     = INFINITY;

	uint SPP = ubo.spp; // Samples per pixel
	uint seed = tea(gl_LaunchIDNV.y * gl_LaunchSizeNV.x + gl_LaunchIDNV.x, ubo.frame);

	vec3 radiance = vec3(0);

	for (uint i = 0; i < SPP; ++i)
	{
		float r1 = rnd(seed);
		float r2 = rnd(seed);

		vec2 jitter = vec2(r1, r2);

		vec2 pixel     = vec2(gl_LaunchIDNV.x, gl_LaunchIDNV.y) + jitter;
		vec2 uv        = (pixel / gl_LaunchSizeNV.xy) * 2.0 - 1.0;
		vec4 origin    = viewInv * vec4(0, 0, 0, 1);
		vec4 target    = projInv * vec4(uv.x, uv.y, 1, 1);
		vec4 direction = viewInv * vec4(normalize(target.xyz), 0);

		// TODO Simulate a lens

		Ray ray = Ray(origin.xyz, direction.xyz);
		vec3 pathRadiance = vec3(0);
		vec3 beta = vec3(1);
		bool specularBounce = false;
		BsdfSample bsdf;

		for (uint j = 0; j < ubo.maxDepth; ++j)
		{
			payload.depth = j;
			payload.specularBounce = specularBounce;
			payload.stop = false;
			payload.radiance = pathRadiance;
			payload.beta = beta;
			payload.ray = ray;
			payload.bsdf = bsdf;

			traceNV(TLAS,           // acceleration structure
					rayFlags,       // rayFlags
					0xFF,           // cullMask
					0,              // sbtRecordOffset
					0,              // sbtRecordStride
					0,              // missIndex
					ray.origin,     // ray origin
					tMin,           // ray min range
					ray.direction,  // ray direction
					tMax,           // ray max range
					0               // payload (location = 0)
			);

			pathRadiance = payload.radiance;
			beta = payload.beta;
			specularBounce = payload.specularBounce;		
			ray = payload.ray;
			bsdf = payload.bsdf;
			
			// First hit payload
			if (j == 0)
			{
				imageStore(NormalsImage, ivec2(gl_LaunchIDNV.xy), vec4(payload.ffnormal, 0.0));
				//imageStore(DepthImage, ivec2(gl_LaunchIDNV.xy), vec4(payload.worldPos, 0.0));
			}

			if (payload.stop)
			{
				break;
			}
		}

		radiance += pathRadiance;
	}
	
	radiance /= float(SPP);

	// HDR scale
	vec3 accumulatedRadiance = ubo.frame > 1 ? imageLoad(AccumulationImage, ivec2(gl_LaunchIDNV.xy)).rbg : vec3(0);
	accumulatedRadiance += radiance;	
	imageStore(AccumulationImage, ivec2(gl_LaunchIDNV.xy), vec4(accumulatedRadiance, 1.0));

	float inv = 1.f / ubo.frame;
	radiance = accumulatedRadiance * inv;

	// LDR scale
	vec3 ldr = toneMap(radiance, 1.5);

	#ifdef USE_GAMMA_CORRECTION
	ldr = gammaCorrection(ldr);
	#endif

	imageStore(OutputImage, ivec2(gl_LaunchIDNV.xy), vec4(ldr, 1.f));

	#ifdef USE_DENOISER
	vec4 denoised = denoise();
	imageStore(OutputImage, ivec2(gl_LaunchIDNV.xy), denoised);
	#endif
}
